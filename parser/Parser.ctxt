#BlueJ class context
comment0.target=Parser
comment0.text=\n\ Parser\ parses\ a\ string\ of\ tokens\ from\ a\ scanner\ to\ evaluate\ the\ expression\n\ following\ a\ certain\ grammar.\ It\ works\ on\ the\ simplified\ PASCAL\ commands\ \n\ WRITELN,\ BEGIN,\ and\ END,\ which\ can\ perform\ mathematical\ computations\ \n\ containing\ that\ addition,\ subtraction,\ multiplication,\ and\ division\ \n\ operations.\ The\ commands\ may\ be\ grouped\ in\ blocks\ and\ will\ be\ evaluated\n\ accordingly.\ This\ parser\ also\ allows\ for\ the\ saving\ of\ values\ into\ \n\ variables.\n\n\ @author\ Kaitlyn\ Wang\n\ @version\ 9/25/23\n
comment1.params=s
comment1.target=Parser(scanner.Scanner)
comment1.text=\n\ Constructor\ for\ Parser\ takes\ in\ a\ Scanner\ as\ an\ instance\ variable\n\ which\ will\ feed\ it\ a\ stream\ of\ tokens,\ it\ also\ instantiates\n\ an\ empty\ map\ for\ the\ instance\ variable\ variables.\n\ \n\ @param\ s\ is\ the\ Scanner\ from\ which\ the\ Parser\ will\ read\ tokens\n
comment2.params=expected
comment2.target=void\ eat(java.lang.String)
comment2.text=\n\ The\ eat\ method\ checks\ that\ the\ currentToken\ is\ equal\ to\ the\ expected\ \n\ value\ and\ if\ it\ matches,\ it\ advances\ to\ the\ next\ token\ given\n\ by\ the\ Scanner.\ otherwise,\ it\ throws\ an\ exception\ as\ an\ unexpected\n\ value.\n\ \n\ @param\ expected\ is\ the\ expected\ value\n
comment3.params=
comment3.target=int\ parseNumber()
comment3.text=\n\ This\ method\ converts\ the\ current\ token\ to\ an\ integer\ value\ \n\ \n\ @precondition\ current\ token\ is\ a\ string\ that\ represents\ \n\ a\ valid\ int\ value\n\ @return\ int\ is\ the\ integer\ value\ of\ the\ current\ token\ (a\ string)\n
comment4.params=
comment4.target=void\ parseStatement()
comment4.text=\n\ This\ method\ acts\ generally\ to\ parse\ a\ statement\ in\ PASCAL.\ \n\ According\ to\ the\ grammar,\ it\ is\ able\ to\ handle\ WRITELN\ commands\n\ by\ printing\ out\ the\ value\ of\ the\ expression\ inside\ the\ command,\n\ BEGIN\ commands\ by\ parsing\ the\ block\ between\ BEGIN\ and\ its\ corresponding\n\ END\ command,\ and\ creates\ new\ variables\ when\ any\ other\ \n\ unrecognized\ input\ is\ given.\n\ \n
comment5.params=
comment5.target=void\ parseBlock()
comment5.text=\n\ This\ method\ parses\ a\ block\ of\ code,\ made\ up\ of\ nothing\ or\ some\n\ amount\ of\ commands\ inside\ a\ BEGIN\ and\ END\ statement.\ When\ the\n\ END\ token\ is\ reached,\ the\ block\ has\n\ ended\ and\ the\ parsing\ stops.\n\ \n\ @precondition\ the\ parser\ has\ recognized\ a\ BEGIN\ token\n\ \n
comment6.params=
comment6.target=int\ parseFactor()
comment6.text=\n\ This\ is\ the\ general\ method\ for\ parsing\ a\ factor,\ which\ is\ \n\ an\ expression\ that\ contains\ the\ following\ possible\ values\:\n\ a\ number\ itself,\ a\ number\ with\ a\ negative\ sign\ preceding\ it,\n\ or\ some\ expression\ enclosed\ in\ parentheses.\n\ \n\ @precondition\ the\ current\ token\ takes\ one\ of\ the\ three\ forms\ described\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ above\n\ @return\ int\ is\ the\ integer\ value\ of\ the\ factor\n
comment7.params=
comment7.target=int\ parseTerm()
comment7.text=\n\ This\ method\ parses\ a\ term,\ which\ is\ any\ expression\ that\ begins\ with\n\ a\ factor\ and\ contains\ any\ number\ of\ factors\ with\ *\ or\ /\ in\n\ between\ the\ factors.\ By\ processing\ terms,\n\ this\ method\ allows\ for\ multiplication\ and\ division\ between\ factors.\ \n\ \n\ @precondition\ the\ next\ stream\ of\ tokens\ is\ a\ valid\ term\ containing\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ only\ factors\ and\ *\ or\ /\ operations\ in\ between\ them\n\ @return\ int\ is\ the\ integer\ value\ of\ the\ term\n
comment8.params=
comment8.target=int\ parseExpression()
comment8.text=\n\ This\ method\ parses\ an\ "expression,"\ which\ is\ any\ stream\ of\ tokens\ that\n\ begins\ with\ a\ term\ and\ contains\ any\ combination\ of\ terms\ with\ possible\n\ +\ or\ -\ operations\ in\ between\ them.\ By\ processing\ "expressions,"\n\ this\ method\ allows\ for\ addition\ and\ subtraction\ between\ terms,\ where\n\ addition\ and\ multiplication\ is\ always\ done\ after\ multiplication\ and\n\ division\ to\ maintain\ the\ proper\ order\ of\ operations.\n\ \n\ @precondition\ the\ next\ stream\ of\ tokens\ is\ a\ valid\ expression\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ containing\ only\ terms\ and\ +\ or\ -\ operations\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ in\ between\ them\n\ @return\ int\ is\ the\ integer\ value\ of\ the\ term\n
numComments=9
