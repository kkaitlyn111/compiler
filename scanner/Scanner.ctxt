#BlueJ class context
comment0.target=Scanner
comment0.text=\n\ Scanner\ is\ a\ simple\ scanner\ that\ reads\ an\ input\ string\ for\ individual\ lexemes\ \n\ and\ returns\ the\ corresponding\ string\ of\ tokens.\n\ The\ Scanner\ also\ eliminates\ comments\ in\ the\ process.\n\ \n\ Notebook\ questions\:\n\ \n\ If\ the\ next\ character\ was\ newline,\ open\ parenthesis,\ or\ white\ space,\ then\ it's\ the\ keyword\ "IF."\ \n\ Otherwise,\ it's\ a\ variable\ name.\n\ \n\ The\ parameter\ passed\ by\ eat\ is\ currentChar,\ which\ serves\ as\ a\ lookahead\ to\ allow\n\ the\ Scanner\ to\ consider\ the\ current\ character\ based\ off\ of\ the\ next\ character\ ahead.\n\ For\ example,\ this\ is\ helpful\ for\ operations\ such\ as\ /[digit]\ or\ //\ where\ the\ meaning\ of\ the\ /\ \n\ character\ changes\ from\ divide\ to\ a\ comment\ line\ operation\ based\ on\ the\ next\ character\ ahead.\n\ \n\ \n\ @author\ Kaitlyn\ Wang\n\ @version\ 9.7.23\n\ \ \n\n
comment1.params=inStream
comment1.target=Scanner(java.io.InputStream)
comment1.text=\n\ Scanner\ constructor\ for\ construction\ of\ a\ scanner\ that\ \n\ uses\ an\ InputStream\ object\ for\ input.\ \ \n\ Usage\:\ \n\ FileInputStream\ inStream\ \=\ new\ FileInputStream(new\ File([file\ name]);\n\ Scanner\ lex\ \=\ new\ Scanner(inStream);\n\ @param\ inStream\ the\ input\ stream\ to\ use\n
comment10.params=c
comment10.target=boolean\ isOperand(char)
comment10.text=\n\ Helper\ method\ that\ determines\ whether\ a\ given\ character\ is\ an\ operand\ or\ not\n\ \n\ @param\ c\ the\ character\ to\ test\n\ @return\ true\ if\ operand,\ false\ if\ anything\ else\n
comment11.params=c
comment11.target=boolean\ isCommand(char)
comment11.text=\n\ Helper\ method\ that\ determines\ whether\ a\ given\ character\ is\ an\ operand\ or\ not\n\ \n\ @param\ c\ the\ character\ to\ test\n\ @return\ true\ if\ operand,\ false\ if\ anything\ else\n
comment12.params=
comment12.target=java.lang.String\ scanNumber()
comment12.text=\n\ Scans\ through\ a\ single\ number\ token.\ A\ number\ is\ defined\ as\ a\ \n\ string\ of\ one\ or\ more\ digits.\n\ \n\ If\ invalid\ token\ received,\ throws\ a\ ScanErrorException\ for\ invalid\ lexeme\n\ \n\ @return\ the\ entire\ token\ as\ a\ String\ when\ finished\ scanning\n
comment13.params=
comment13.target=java.lang.String\ scanIdentifier()
comment13.text=\n\ Scans\ through\ a\ single\ identifier\ token.\ An\ identifier\ is\ defined\ as\ a\ \n\ string\ that\ begins\ with\ a\ letter\ followed\ by\ any\ combination\ of\ letter\ or\ digit\ characters.\ \n\ \n\ \n\ If\ invalid\ token\ received,\ throws\ a\ ScanErrorException\ for\ invalid\ lexeme\n\ \n\ @return\ the\ entire\ token\ as\ a\ String\ when\ finished\ scanning\n
comment14.params=c
comment14.target=boolean\ isStickyOperand(char)
comment15.params=
comment15.target=java.lang.String\ scanOperand()
comment15.text=\n\ Scans\ through\ a\ single\ operand\ token.\ An\ operand\ is\ defined\ as\ a\ \n\ string\ of\ one\ or\ more\ operand\ characters.\ If\ a\ comment\ operand\ //\n\ is\ detected,\ the\ next\ line\ will\ be\ ignored.\n\ \n\ If\ invalid\ token\ received,\ throws\ a\ ScanErrorException\ for\ invalid\ lexeme\n\ \n\ @return\ the\ entire\ token\ as\ a\ String\ when\ finished\ scanning\n
comment16.params=
comment16.target=java.lang.String\ nextToken()
comment16.text=\n\ NextToken\ advances\ the\ scanner\ by\ skipping\ all\ \n\ leading\ white\ spaces\ until\ the\ first\ character\ of\ the\ \n\ next\ token\ is\ reached.\ Afterward,\ it\ initiates\ the\ scanning\ process\ for\ the\ token\ \n\ based\ on\ the\ first\ character\:\n\ if\ the\ first\ char\ is\ a\ letter,\ it\ scans\ the\ identifier\n\ if\ the\ first\ char\ is\ a\ digit,\ it\ scans\ the\ number\n\ if\ the\ first\ char\ is\ an\ operand,\ it\ scans\ the\ operand\n\ if\ the\ character\ is\ a\ period,\ it\ initiates\ the\ end\ of\ file\n\ Unidentified\ characters\ are\ skipped\ in\ this\ setting,\ but\ can\ also\ be\ \n\ set\ to\ throw\ an\ exception\n\ \n\ @return\ the\ entire\ token\ after\ the\ scan\ as\ a\ String\n\ \n
comment2.params=inString
comment2.target=Scanner(java.lang.String)
comment2.text=\n\ Scanner\ constructor\ for\ constructing\ a\ scanner\ that\ \n\ scans\ a\ given\ input\ string.\ \ It\ sets\ the\ end-of-file\ flag\ an\ then\ reads\n\ the\ first\ character\ of\ the\ input\ string\ into\ the\ instance\ field\ \n\ currentChar.\n\ Usage\:\ Scanner\ lex\ \=\ new\ Scanner(input_string);\n\ @param\ inString\ the\ string\ to\ scan\n
comment3.params=
comment3.target=void\ getNextChar()
comment3.text=\n\ The\ getNextChar\ method\ attempts\ to\ get\ the\ next\ character\ from\ the\ input\n\ stream.\ \ It\ sets\ the\ eof\ flag\ true\ if\ the\ end\ of\ file\ is\ reached\ on\n\ the\ input\ stream.\ \ Otherwise,\ it\ sets\ the\ currentChar\ to\ the\ next\ integer\ from\ the\ stream\n\ converted\ to\ a\ char\ type.\n\ \n
comment4.params=expected
comment4.target=void\ eat(char)
comment4.text=\n\ This\ method\ allows\ the\ scanner\ to\ take\ in\ one\ character\ in\ advance\n\ by\ calling\ getNextChar()\ to\ allow\ for\ easy\ error\ detection.\ First\ \n\ compares\ the\ input\ string\ to\ the\ current\ character,\ and\ if\ they\n\ match\ then\ it\ advances\ to\ the\ next\ character,\ otherwise\ throws\n\ a\ scan\ error\ exception\ which\ helps\ with\ debugging.\n\ \n\ @param\ expected\ is\ the\ current\ character,\ should\ match\ the\ expected\ char\n
comment5.params=
comment5.target=boolean\ hasNext()
comment5.text=\n\ The\ method\ checks\ if\ a\ next\ character\ exists,\ returning\ false\ \n\ if\ the\ end\ of\ file\ has\ already\ been\ reached.\ \n\ @return\ Returns\ false\ if\ input\ stream\ has\ reached\ the\ end\ of\ file,\ otherwise\ true.\n
comment6.params=c
comment6.target=boolean\ isDigit(char)
comment6.text=\n\ Helper\ method\ that\ determines\ whether\ a\ given\ character\ is\ a\ digit\ or\ not\n\ @param\ c\ the\ character\ to\ test\n\ @return\ true\ if\ digit,\ false\ if\ anything\ else\n
comment7.params=c
comment7.target=boolean\ isLetter(char)
comment7.text=\n\ Helper\ method\ that\ determines\ whether\ a\ given\ character\ is\ a\ letter\ or\ not,\ \n\ capital\ or\ lowercase\n\ @param\ c\ the\ character\ to\ test\n\ @return\ true\ if\ letter,\ false\ if\ anything\ else\n
comment8.params=c
comment8.target=boolean\ isPeriod(char)
comment8.text=\n\ Helper\ method\ that\ determines\ whether\ a\ given\ character\ is\ a\ period\ or\ not,\ \n\ @param\ c\ the\ character\ to\ test\n\ @return\ true\ if\ period,\ false\ if\ anything\ else\n
comment9.params=c
comment9.target=boolean\ isWhiteSpace(char)
comment9.text=\n\ Helper\ method\ that\ determines\ whether\ a\ given\ character\ is\ a\ white\ space\ or\ not\n\ Next\ line\ \\n,\ tab\ \\t,\ and\ return\ \\r\ are\ all\ considered\ white\ spaces\n\ along\ with\ the\ space\ '\ '\ character\n\ @param\ c\ the\ character\ to\ test\n\ @return\ true\ if\ white\ space,\ false\ if\ anything\ else\n
numComments=17
